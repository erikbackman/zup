#!/usr/bin/env php
<?php

define("CACHE_DIR", __DIR__ . "/.cache");
define("VERSION_FILE", CACHE_DIR . "/versions");

function print_help() {
	echo <<<HELP
Usage: zup [command] [arguments]
  sync
  list
  install [version]
  use [version]
HELP;
}

function get_cached_version($want_ver) {
	$fp = fopen(VERSION_FILE, "r");
	while ($line = fgets($fp)) {
		list($ver, $url) = explode(" ", trim($line));
		if ($ver == $want_ver) {
			fclose($fp);
			return $url;
		}
	}
	fclose($fp);
}

function version_comp($a, $b) {
	if ($a == "master") return -1;
	if ($b == "master") return 1;
	return version_compare($a, $b, "<") ? 1 : -1;
}

function check_for_zls($in_ver) {
	$url = "https://github.com/zigtools/zls/releases/download/{$in_ver}/zls-x86_64-linux.tar.xz";
	$output = [];
	exec("curl -Is {$url}", $output);
	if ($output != "HTTP/2 404") {
		return $url;
	}
	return "";
}

function sync() {
	if (!is_dir(CACHE_DIR)) {
		mkdir(CACHE_DIR);
	}

	$versions = json_decode(file_get_contents("https://ziglang.org/download/index.json"), true);
	uksort($versions, "version_comp");
	$fp = fopen(VERSION_FILE, "w");
	foreach ($versions as $key => $info) {
		if (!empty($info["x86_64-linux"]["tarball"])) {
			$url = $info["x86_64-linux"]["tarball"];
			fwrite($fp, "{$key} {$url}\n");
		}
	}
	fclose($fp);
}

function cmd_available($cmd) {
	$return = -1;
	system("which {$cmd} > /dev/null", $return);
	return $return == 0;
}

function install($ver) {
	if (!$ver) {
		echo "Usage: zup install [version]\n";
		exit(-1);
	}
	if (!cmd_available("minisign")) {
		echo "minisign not found\n";
		exit(-1);
	}

	$file = tempnam(sys_get_temp_dir(), "zup-");
	$sf = $file . ".minisig";
	$url = get_cached_version($ver);
	file_put_contents($file, file_get_contents($url));
	file_put_contents($sf, file_get_contents($url . ".minisig"));

	$pkey = "RWSGOq2NVecA2UPNdBUZykf1CCb147pkmdtYxgb3Ti+JO/wCYvhbAb/U";
	$return = -1;
	system("minisign -q -V -m {$file} -P {$pkey}", $return);
	if ($return != 0) {
		unlink($file);
		unlink($sf);
		die("Signature verification failed");
	} else {
		echo "Signature OK. Installing..\n";
		$cache_dir = CACHE_DIR . "/{$ver}";
		mkdir($cache_dir);
		system("tar -xf {$file} -C {$cache_dir} --strip-components=1");
		$zls_url = check_for_zls($ver);
		if ($zls_url != "") {
			$input = readline("ZLS available, install? y/n: ");
			if ($input == "y") {
				$zls_file = tempnam(sys_get_temp_dir(), "zup-zls-");
				file_put_contents($zls_file, file_get_contents($zls_url));
				system("tar -xf {$zls_file} -C {$cache_dir}");
				unlink($zls_file);
			}
		}
		echo "Done\n";
	}
	unlink($file);
	unlink($sf);
}

function use_version($ver) {
	if (!$ver) {
		echo "Usage: zup use [version]\n";
		exit(-1);
	}
	$url = get_cached_version($ver);
	if (is_dir(CACHE_DIR . "/{$ver}")) {
		$source = CACHE_DIR . "/{$ver}/";
		$link = __DIR__  . "/bin";
		system("ln -sfn {$source} {$link}");
	} else {
		echo "Version {$ver} is not installed, run 'zup install {$ver}' first.\n";
	}
}

function get_status($ver) {
	if (file_exists(__DIR__ . "/bin/zig")) {
		if (basename(readlink(__DIR__ . "/bin")) == $ver) return "[Current]";
	}
	if (is_dir(CACHE_DIR . "/{$ver}")) return "[Installed]";
	return "";
}

function list_versions() {
	if (!file_exists(VERSION_FILE)) {
		echo "Please run 'zup sync'\n";
		exit(0);
	}

	$fp = fopen(VERSION_FILE, "r");
	while ($line = fgets($fp)) {
		list($ver, $url) = explode(" ", trim($line));
		$status = get_status($ver);
		echo "{$ver} {$status}\n";
	}
	fclose($fp);
}

$action = $argv[1] ?? "help";

if ($action == "help") {
	print_help();
} elseif ($action == "use") {
	use_version($argv[2] ?? null);
} elseif ($action == "install") {
	install($argv[2] ?? null);
} elseif ($action == "sync") {
	sync();
} elseif ($action == "list") {
	list_versions();
}
